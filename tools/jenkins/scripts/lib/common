#!/usr/bin/env bash

function retrieve_boolean_value {

    value=$1
    case "${value}" in
        yes)
            echo 'true'
            ;;
        no)
            echo 'false'
            ;;
        *)
            >&2 echo "\"${value}\": specified value cannot be casted into boolean type."
            exit 1
            ;;
    esac
}

function retrieve_credential_file {

    inventory=$1
    tower_host=$(retrieve_tower_server_from_inventory "${INVENTORY}")
    tower_user=$(retrieve_system_user_from_inventory "${INVENTORY}")

    is_fips_enabled=$(ssh -ostricthostkeychecking=no "${tower_user}"@"${tower_host}" cat /proc/sys/crypto/fips_enabled)
    if [[ "${is_fips_enabled}" == 1 ]]; then
        echo 'config/credentials-pkcs8.yml'
    else
        echo 'config/credentials.yml'
    fi
}

function retrieve_inventory_file {

    if [[ -f "playbooks/inventory.log" ]]; then
        echo "playbooks/inventory.log"
    else
        echo "playbooks/inventory.cluster"
    fi
}

function generate_instance_name_prefix {

    instance_name_prefix=$1
    platform=$2
    ansible_version=$3
    tower_version=$4

    echo "${instance_name_prefix}-ansible-${ansible_version}-${platform}"
}

# shellcheck disable=2034
function setup_env_based_on_deployment_scenario {

    scenario=$1

    case "${scenario}" in
       standalone)
           PLAYBOOK=playbooks/deploy-tower.yml
           INVENTORY=playbooks/inventory.log
           IMAGE_VARS=playbooks/images-ec2.yml
           VARS_FILE=playbooks/vars.yml
           ;;
       cluster)
           PLAYBOOK=playbooks/deploy-tower-cluster.yml
           INVENTORY=playbooks/inventory.cluster
           IMAGE_VARS=playbooks/images-isolated-groups.yml
           VARS_FILE=playbooks/vars.yml
           export CLUSTER_SETUP=true
           export AWX_APPLY_ISOLATED_GROUPS_FW_RULES=false
           ;;
       test_runner)
           PLAYBOOK=playbooks/deploy-tower-cluster.yml
           INVENTORY=playbooks/inventory.test_runner
           VARS_FILE=playbooks/test_runner_vars.yml
           IMAGE_VARS=playbooks/images-test-runner.yml
           INSTANCE_NAME_PREFIX=test-runner-${PLATFORM}-${INSTANCE_NAME_PREFIX}
           PLATFORM=rhel-7.6-x86_64
           AWX_IPV6_DEPLOYMENT=no
           ;;
       *)
           (>&2 echo "\"${scenario}\" is not a supported scenario. Supported scenarios: standalone, cluster.")
           exit 1
           ;;
    esac
}

function retrieve_aw_repo_url_based_on_version {

    version=$1
    url="https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-${version}-1.el7.tar.gz"
    http_code=$(curl -L -s -o /dev/null -I -w "%{http_code}" "${url}")

    if [[ "${http_code}" == "200" ]]; then
        echo 'https://releases.ansible.com/ansible-tower'
    else
        url="http://nightlies.testing.ansible.com/ansible-tower_nightlies_m8u16fz56qr6q7/release_${version}"
        http_code=$(curl -L -s -o /dev/null -I -w "%{http_code}" "${url}")
        if [[ "${http_code}" == "200"  ]]; then
            echo "http://nightlies.testing.ansible.com/ansible-tower_nightlies_m8u16fz56qr6q7/release_${version}"
        else
           url="http://nightlies.testing.ansible.com/ansible-tower_nightlies_m8u16fz56qr6q7/${version}"
           http_code=$(curl -L -s -o /dev/null -I -w "%{http_code}" "${url}")
           if [[ "${http_code}" == "200"  ]]; then
               echo "http://nightlies.testing.ansible.com/ansible-tower_nightlies_m8u16fz56qr6q7/${version}"
           else
               >&2 echo "\"${version}\": specified version cannot be found."
               exit 1
           fi
        fi
    fi
}

function retrieve_awx_setup_path_based_on_version_and_scenario {

    version=$1
    scenario=$2
    aw_repo_url=$3
    bundle=$4
    platform=$5

    if [[ "${platform}" == "rhel-8.0-x86_64" ]]; then
        _platform='el8'
    else
        _platform='el7'
    fi

    if [[ "${aw_repo_url}" =~ .*"nightlies.testing.ansible.com".* ]]; then
        if [[ "${bundle}" == "yes" ]]; then
            echo "/setup-bundle/ansible-tower-setup-bundle-latest.${_platform}.tar.gz"
        else
            echo "/setup/ansible-tower-setup-latest.tar.gz"
        fi
    else
        if [[ "${bundle}" == "yes" ]]; then
            echo "/setup-bundle/ansible-tower-setup-bundle-${version}-1.${_platform}.tar.gz"
        else
            _vers=$(echo -e "${version}\n3.3.0" | sort -V | head -n 1)
            if [[ "${version}" == "${_vers}" ]]; then
                echo "/setup/ansible-tower-setup-${version}.tar.gz"
            else
                echo "/setup/ansible-tower-setup-${version}-1.tar.gz"
            fi
        fi
    fi
}

function retrieve_verbosity_string {

    if [[ "${VERBOSE}" == "yes" ]]; then
        echo '-vvvv'
    else
        echo '-v'
    fi
}

function retrieve_tower_server_from_inventory {

    inventory=$1
    if grep cluster_installer "${inventory}" > /dev/null; then
        grep -A 1 cluster_installer "${inventory}" | tail -n 1 | cut -d' ' -f 1
    else
        grep -A 1 tower "${inventory}" | tail -n 1 | cut -d' ' -f 1
    fi
}

function retrieve_system_user_from_inventory {

    inventory=$1
    if grep cluster_installer "${inventory}" > /dev/null; then
        grep -A 1 cluster_installer "${inventory}" | grep -o 'ansible_user=\S*' | cut -d= -f2
    else
        grep -A 1 tower "${inventory}" | grep -o 'ansible_user=\S*' | cut -d= -f2
    fi
}

function is_tower_ready {

    tower_url=$1
    http_code=$(curl -k -L -s -o /dev/null -I -w "%{http_code}" "${tower_url}")
    if [[ "${http_code}" == 200 ]]; then
        return 0
    else
        return 1
    fi
}

function retrieve_deployment_type {

  url=$1
  # TODO(spredzy): Look at the license endpoint and return 'tower' or 'awx'
  echo 'tower'
}


function setup_python3_env {

    INVENV=$(python -c 'import sys; print ("1" if hasattr(sys, "real_prefix") else "0")')

    if [[ "$(python --version 2>&1)" =~ Python\ 3.\.* ]] && [[ "${INVENV}" == "1" ]]; then
        true
    elif [ "$(grep -s "python3" tox.ini)" ]; then
        [[ "${INVENV}" == "1" ]] && deactivate || true
        mkdir -p "${HOME}/venvs"
        venv_path="${HOME}/venvs/${1:-venv}"
        if [ ! -d "${venv_path}" ]; then
            python3 -m venv "${venv_path}"
        fi
        # shellcheck disable=SC1090
        source "${venv_path}/bin/activate"
    fi

    # Ensure pip is updated
    pip install -U pip
}

function retrieve_value_from_vars_file {

    FILE=$1
    KEY=$2

    grep "^${KEY}:" "${FILE}" | cut -d' ' -f2
}
