---
- name: Deploy cloud hosts
  hosts: local
  tasks:
    - include_role:
        name: create_ec2
      when: not awx_upgrade | default(false) | bool

    - include_role:
        name: save_inventory
      vars:
        my_inventory_file: '{{inventory_dir}}/inventory.cluster'
      when: not awx_upgrade | default(false) | bool

- name: Generate TLS certificates when specified
  hosts: cluster_installer
  tasks:
    - name: Run TLS certificates generation playbooks
      include_role:
        name: generate_tls_certificates
      when: awx_use_tls | default(false) | bool

- name: Enable FIPS for isolated nodes
  hosts: 'tower:isolated_group*:instance_group*'
  tasks:
    - name: Run FIPS Role
      include_role:
        name: fips
      when: "'7.5' in ansible_distribution_version and fips_enabled | default(true) | bool and not awx_upgrade | default(false) | bool"

- name: 'Add authorized keys on non-installer instances'
  hosts: 'tower:instance_group_*:isolated_group_*:database:haproxy:managed_hosts:!cluster_installer'
  roles:
    - role: auth_keys

- name: 'Group hosts by distribution_major_version'
  hosts: 'tower,instance_group_*'
  tasks:
    - name: group hosts by distribution_major_version
      action: group_by key="{{ansible_distribution}}-{{ansible_distribution_major_version}}"

- name: 'Configure cluster ssh keys'
  hosts: 'tower:instance_group_*:isolated_group_*:database'
  roles:
    - {role: cluster_key_config, install_group: cluster_installer}

- name: Install proper ansible version on all nodes
  hosts: all:!localhost
  gather_facts: false
  become: true
  tasks:
    - include_role:
        name: packages
      when: not out_of_box_os | default(false) | bool
    - name: update systemd
      yum:
        name: systemd*
        state: latest
        update_cache: true
        update_only: true

- name: 'Install cluster tower on installer instance'
  hosts: 'cluster_installer'
  gather_facts: false
  become: true
  become_method: sudo
  roles:
    - role: awx_setup

- name: Install specific version of ansible-runner (if applies)
  hosts: tower
  gather_facts: false
  become: true
  tasks:
    - include_role:
        name: ansible_runner
      when: awx_ansible_runner_url is defined and awx_ansible_runner_url != ''

- name: Install specific version of ansible-runner (if applies)
  hosts: isolated_group*
  gather_facts: false
  become: true
  tasks:
    - include_role:
        name: ansible_runner
      vars:
        isolated: true
      when: awx_ansible_runner_url is defined and awx_ansible_runner_url != ''

- name: 'install and configure haproxy'
  hosts: 'haproxy'
  roles:
    - role: haproxy
  gather_facts: false
  become: true
  become_method: sudo

# Only do this if/when haproxy host exists in the inventory
- name: 'Make Tower instances aware of upstream proxy'
  hosts: tower
  tasks:
    - name: "Tell tower to honor upstream forwarded for port and host headers"
      template:
        src: "templates/load_balancer.py.j2"
        dest: "/etc/tower/conf.d/load_balancer.py"
      when: "'haproxy' in hostvars.keys()"

# Make managed hosts accessible by password auth
- name: Enable password auth to managed hosts
  hosts: 'managed_hosts'
  become: true
  become_method: sudo
  tasks:
    - name: Enable password auth in sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication no'
        line: 'PasswordAuthentication yes'
        state: present

    - name: Set password for user
      user:
        name: "{{ ansible_user }}"
        password: "{{ admin_password|password_hash('sha512') }}"

    - name: Restart sshd
      service:
        name: sshd
        enabled: true
        state: restarted

- name: Remove IPV4
  hosts: tower
  tasks:
    - include_role:
        name: ipv6
      when: awx_ipv6_deployment | default(false) | bool

    - name: Save ipv6 to name resolution locally
      become: true
      delegate_to: localhost
      blockinfile:
        path: /etc/hosts
        block: |
          {{ hostvars[item]["ansible_default_ipv6"]["address"] }} {{ hostvars[item]["inventory_hostname"] }}
      with_items: '{{ groups["tower"] }}'
      when: awx_ipv6_deployment | default(false) | bool

- name: Set isolated heartbeats to 1 minute
  hosts: tower
  tasks:
    - copy:
        dest: /etc/tower/conf.d/iso_heartbeat.py
        owner: root
        group: awx
        mode: 0640
        content: "AWX_ISOLATED_PERIODIC_CHECK = 60"
        force: true
      become: true

- name: Restart dispatcher so that changes in /etc/tower/conf.d take effect
  hosts: tower
  tasks:
    - command: supervisorctl restart tower-processes:awx-dispatcher
      become: true
      retries: 2
      delay: 3
      register: result
      until: result is success
