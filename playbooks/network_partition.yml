---
# This playbook creates a network partition between two groups of hosts.
# In the inventory file, the two partitions should be defined by groups
# instance_group_partition_1 and instance_group_partition_2.
#
# Network partitions in which there are an equal number of hosts on
# each side are especially difficult to recover from. Because of this,
# the two partition groups should ideally be of different sizes.
#
# To create a network partiton:
#
# ansible-playbook -i inventory network_partition.yml
#
# To restore the connection between partitions:
#
# ansible-playbook -i inventory -e network_partition_state=disabled network_partition.yml
#
- hosts: instance_group_partition_1:instance_group_partition_2
  tasks:
    - block:
        - name: install firewalld (yum)
          yum:
            name: firewalld
            state: latest
            update_cache: true
          when: ansible_pkg_mgr == 'yum'

        - name: install firewalld (apt)
          apt:
            pkg: firewalld
            state: latest
            update_cache: true
          when: ansible_pkg_mgr == 'apt'

        - name: enable firewalld
          service:
            name: firewalld
            enabled: true
            state: started

        - name: Add eth0 to trusted zone
          firewalld:
            interface: eth0
            zone: trusted
            state: enabled
            permanent: true
            immediate: true
      become: true

- hosts: instance_group_partition_1
  tasks:
    - name: In first partition, set firewall rules for blocking instances of second partition
      firewalld:
        rich_rule: 'rule family="ipv4" source address="{{ hostvars[item].ansible_host }}/32" drop'
        zone: trusted
        state: "{{ network_partition_state|default('enabled') }}"
        permanent: true
        immediate: true
      with_items: "{{ groups['instance_group_partition_2'] }}"
      become: true

- hosts: instance_group_partition_2
  tasks:
    - name: In second partition, set firewall rules for blocking instances of first partition
      firewalld:
        rich_rule: 'rule family="ipv4" source address="{{ hostvars[item].ansible_host }}/32" drop'
        zone: trusted
        state: "{{ network_partition_state|default('enabled') }}"
        permanent: true
        immediate: true
      with_items: "{{ groups['instance_group_partition_1'] }}"
      become: true

- hosts: instance_group_partition_1:instance_group_partition_2
  tasks:
    - block:
        - name: Install EPEL
          yum:
            name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            state: latest

        - name: Install tcpkill
          yum:
            name: dsniff
            enablerepo: rhui-REGION-rhel-server-optional
      become: true
      when: network_partition_state|default('enabled') == 'enabled'

- hosts: instance_group_partition_1
  tasks:
    - name: In first partition, terminate connections to second partition
      command: timeout 5 tcpkill -i eth0 -9 src "{{ hostvars[item].ansible_host }}"
      with_items: "{{ groups['instance_group_partition_2'] }}"
      become: true
      register: tcpkill
      when: network_partition_state|default('enabled') == 'enabled'
      failed_when: "'listening on eth0' not in tcpkill.stderr"

- hosts: instance_group_partition_2
  tasks:
    - name: In second partition, terminate connections to first partition
      command: timeout 5 tcpkill -i eth0 -9 src "{{ hostvars[item].ansible_host }}"
      with_items: "{{ groups['instance_group_partition_1'] }}"
      become: true
      register: tcpkill
      when: network_partition_state|default('enabled') == 'enabled'
      failed_when: "'listening on eth0' not in tcpkill.stderr"

- hosts: instance_group_partition_1:instance_group_partition_2
  tasks:
    - name: Install nc
      become: true
      yum:
        name: nmap-ncat
        enablerepo: rhui-REGION-rhel-server-releases

- hosts: instance_group_partition_1
  tasks:
    - name: In first partition, ensure no connectivity to second partition
      command: nc -v -i 15 -w 15 "{{ hostvars[item].ansible_host }}" 22
      with_items: "{{ groups['instance_group_partition_2'] }}"
      become: true
      register: nc
      when: network_partition_state|default('enabled') == 'enabled'
      failed_when: "'Connected to' in nc.stderr"

- hosts: instance_group_partition_2
  tasks:
    - name: In second partition, ensure no connectivity to first partition
      command: nc -v -i 15 -w 15 "{{ hostvars[item].ansible_host }}" 22
      with_items: "{{ groups['instance_group_partition_1'] }}"
      become: true
      register: nc
      when: network_partition_state|default('enabled') == 'enabled'
      failed_when: "'Connected to' in nc.stderr"

- hosts: instance_group_partition_1
  tasks:
    - name: In first partition, ensure connectivity to second partition
      command: nc -v -i 15 -w 15 "{{ hostvars[item].ansible_host }}" 22
      with_items: "{{ groups['instance_group_partition_2'] }}"
      become: true
      register: nc
      when: network_partition_state|default('enabled') != 'enabled'
      failed_when: "'Connected to' not in nc.stderr"

- hosts: instance_group_partition_2
  tasks:
    - name: In second partition, ensure connectivity to first partition
      command: nc -v -i 15 -w 15 "{{ hostvars[item].ansible_host }}" 22
      with_items: "{{ groups['instance_group_partition_1'] }}"
      become: true
      register: nc
      when: network_partition_state|default('enabled') != 'enabled'
      failed_when: "'Connected to' not in nc.stderr"
