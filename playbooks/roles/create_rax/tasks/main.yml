---
# Tasks to delete (optionally) and create rax instances

- name: ensure keypair exists
  rax_keypair:
    api_key: '{{ rax_api_key }}'
    username: '{{ rax_username }}'
    region: '{{ rax_region }}'
    name: '{{ rax_key_name }}'
    public_key: '{{ item }}'
    state: present
  register: keypair
  with_file: rax_public_key
  when: rax_images

- name: create (or locate) rax instance(s)
  rax:
    api_key: '{{ rax_api_key }}'
    username: '{{ rax_username }}'
    name: '{{ rax_name_prefix }}-{{ item.name }}'
    flavor: '{{ rax_flavor }}'
    image: '{{ item.uuid }}'
    region: '{{ rax_region }}'
    # meta doesn't behave like I expected ... disable for now
    # meta: '{{ rax_meta }}'
    files:
      /root/.ssh/authorized_keys: '{{ rax_public_key }}'
    wait: yes
    wait_timeout: 600
    state: present
  register: rax
  # NOTE: This if rax.instances contains more than one instance, which
  # different status, this will incorrectly succeed
  # retries: 3
  # until: rax|success and 'ACTIVE' in rax.instances|selectattr('rax_status')
  # until: rax.instances[0].rax_status == 'ACTIVE'
  with_items: rax_images

# Despite using `wait` on the ec2 module, instances aren't accepting ssh
# connections immediately.  The following will ensure systems are ready for use
# before proceeding.
- name: wait for instances to listen on port:22
  wait_for:
    state=started
    host={{ item.instances[0].accessIPv4 }}
    port=22
  with_items: rax.results
  when: rax_images and rax is defined

- name: add_host
  # add_host: name={{ item.instances[0].name }}
  add_host: name={{ item.instances[0].accessIPv4 }}
     groups=cloud,rax,{{item.item.name}}
     ansible_ssh_user=root
     ansible_ssh_host={{ item.instances[0].accessIPv4 }}
  with_items: rax.results
  when: rax_images and rax is defined

# HACK: While sshd may be listening, it may not fully accept connections
# immediately
- name: sleep 30s
  command: sleep 30s
  when: rax_images and rax is defined and rax.changed
