---
# Download ansible-tower-setup and run the setup playbook

- name: download ansible-tower-setup tarball
  get_url:
    url: '{{aw_repo_url}}/{{awx_setup_path}}'
    dest: /tmp
    mode: 0640
  register: tarball

- name: remove any previously extracted tarball files
  file:
    path: '/tmp/setup'
    state: absent
  when: tarball.changed

- name: untar ansible-tower-setup
  command: tar -xvf {{tarball.dest}} --transform "s|^[^/]*|setup|"
  args:
      chdir: /tmp
  when: tarball.changed

- name: is awx already installed?
  stat:
    path: /etc/tower/awx.cert
  register: is_awx_installed

- name: create sudoers config
  template:
    src: sudoers.j2
    dest: /etc/sudoers.d/tower-qa
    mode: '0640'
    owner: 'root'
    group: 'root'

- name: create inventory file
  template:
    src: inventory.j2
    dest: /tmp/setup/inventory
  when: not is_awx_installed.stat.exists or awx_upgrade

- name: create vars.yml file
  template:
    src: vars.yml.j2
    dest: /tmp/setup/vars.yml
  when: not is_awx_installed.stat.exists or awx_upgrade

- name: setup.sh
  command: ./setup.sh -e @vars.yml
  args:
      chdir: /tmp/setup
      # creates: /etc/tower/awx.cert
  environment:
    ANSIBLE_HOST_KEY_CHECKING: 'False'
    ANSIBLE_BECOME: 'True'
    ANSIBLE_BECOME_METHOD: 'sudo'
  when: not is_awx_installed.stat.exists or awx_upgrade

- name: verify Tower API is accepting connections
  uri:
      url: 'https://localhost/api/v1/config/'
      validate_certs: false
      status_code: '200'
      user: 'admin'
      password: '{{ admin_password }}'
