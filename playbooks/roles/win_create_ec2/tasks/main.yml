---
# Tasks to delete (optionally) and create ec2 instances

- name: ensure ansible winrm security group exists
  ec2_group:
    state: present
    name: '{{ win_ec2_security_group }}'
    description: Security Group for Ansible WinRM instances
    region: '{{ win_ec2_region }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3389
        to_port: 3389
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 5985
        to_port: 5985
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 5986
        to_port: 5986
        cidr_ip: 0.0.0.0/0
  when: win_ec2_images

- name: ensure keypair exists
  ec2_key:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ win_ec2_region }}'
    name: '{{ win_ec2_key_name }}'
    key_material: "{{ item }}"
  with_file: win_ec2_public_key
  register: keypair
  when: win_ec2_images

- name: create/locate ec2 instance(s)
  ec2:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ win_ec2_region }}'
    instance_type: '{{ win_ec2_instance_type }}'
    instance_tags:
        Name: '{{win_ec2_name_prefix}}-{{item.name}}'
    group: '{{ win_ec2_security_group }}'
    key_name: '{{ win_ec2_key_name }}'
    image: '{{ item.id }}'
    user_data: "{{ lookup('file', 'win_ec2_user_data') }}"
    exact_count: 1
    count_tag:
        Name: '{{win_ec2_name_prefix}}-{{item.name}}'
    wait: yes
  with_items: win_ec2_images
  register: win_ec2

# Despite using `wait` on the ec2 module, instances aren't accepting
# connections immediately.  The following will ensure systems are ready for use
# before proceeding.
- name: wait for instances to listen on port 5986 (winrm https)
  wait_for:
    state=started
    host={{ item.tagged_instances[0].public_ip }}
    port=5986
  with_items: win_ec2.results
  when: win_ec2_images and win_ec2 is defined

- name: obtain windows passwords for instances
  ec2_win_pass:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ win_ec2_region }}'
    instance_id: "{{ item.tagged_instances[0].id }}"
    private_key: "{{ lookup('file', win_ec2_private_key) }}"
  with_items: win_ec2.results
  register: win_ec2_passwords
  when: win_ec2_images and win_ec2 is defined

- name: add_host
  add_host:
    name: '{{ item.item.tagged_instances[0].public_dns_name }}'
    groups: 'cloud,ec2,windows,{{win_ec2_name_prefix}}-{{ item.item.item.name }}'
    ansible_ssh_host: '{{ item.item.tagged_instances[0].public_ip }}'
    ansible_ssh_port: 5986
    ansible_ssh_user: '{{ item.item.item.user }}'
    ansible_ssh_pass: '{{ item.password }}'
    ansible_connection: 'winrm'
  with_items: win_ec2_passwords.results
  when: win_ec2_images and win_ec2_passwords is defined
