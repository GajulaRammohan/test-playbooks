---
# Tasks to delete (optionally) and create rax instances

- name: ensure awx security group exists
  ec2_group:
    state: present
    name: '{{ ec2_security_group }}'
    description: Security Group for AWX instances
    region: '{{ ec2_region }}'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
  when: ec2_images

- name: ensure keypair exists
  ec2_key:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ ec2_region }}'
    name: '{{ ec2_key_name }}'
    key_material: "{{ item }}"
  with_file: ec2_public_key
  register: keypair
  when: ec2_images

- name: create/locate ec2 instance(s)
  ec2:
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ ec2_region }}'
    instance_type: '{{ ec2_instance_type }}'
    instance_tags:
        Name: '{{ec2_name_prefix}}-{{item.name}}'
        ANSIBLE_INSTALL_METHOD: '{{ansible_install_method|default("nightly")}}'
    group: '{{ ec2_security_group }}'
    key_name: '{{ ec2_key_name }}'
    image: '{{ item.id }}'
    exact_count: 1
    count_tag:
        Name: '{{ec2_name_prefix}}-{{item.name}}'
        ANSIBLE_INSTALL_METHOD: '{{ansible_install_method|default("nightly")}}'
    wait: yes
    volumes:
        - device_name: /dev/sda1
          device_type: gp2
          volume_size: 10
          delete_on_termination: true
  with_items: ec2_images
  register: ec2

# Despite using `wait` on the ec2 module, instances aren't accepting ssh
# connections immediately.  The following will ensure systems are ready for use
# before proceeding.
- name: wait for instances to listen on port:22
  wait_for:
    state=started
    host={{ item.tagged_instances[0].public_dns_name }}
    port=22
  with_items: ec2.results
  when: ec2_images and ec2 is defined

- name: add_host
  # add_host: name={{ ec2_name_prefix }}-{{ item.item.name }}
  add_host: name={{ item.tagged_instances[0].public_dns_name }}
     groups=cloud,ec2,{{ item.item.name }},{{item.item.groups|default('')}}
     ansible_ssh_user={{ item.item.user }}
     ansible_ssh_host={{ item.tagged_instances[0].public_dns_name }}
     # ansible_ssh_private_key_file={{ ec2_keypair_private }}
  with_items: ec2.results
  when: ec2_images and ec2 is defined

# HACK: While sshd may be listening, it may not fully accept connections
# immediately
- pause: seconds=30
  when: ec2_images and ec2 is defined and ec2.changed
