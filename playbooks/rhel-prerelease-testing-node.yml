#
# Expected variables in this play
#
#   |----------------|-------------|---------------------|
#   | Name           | Description | Example             |
#   |----------------|-------------|---------------------|
#   | rhel_version   |             | 'RHEL-7.6-Beta-1.2' |
#   | tower_version  |             | '3.3.0'             |
#   | node_flavor    |             | m5.large            |
#   | node_keypair   |             | mykeypair           |
#   | admin_password |             | password            |
#   | pg_password    |             | password            |
#   | rhsm_username  |             | jdoe@redhat.com     |
#   | rhsm_password  |             | password            |
#   | rhsm_pool_ids  |             | 39402r3r3143214321  |
#   | working_dir    |             | /tmp                |
#   |----------------|-------------|---------------------|
#
---
- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Pre-spawn test runner VMs'
  os_server:
    name: '{{ rhel_version }}-tower-{{ tower_version }}'
    image: '{{ rhel_version }}'
    flavor: '{{ node_flavor }}'
    key_name: '{{ node_keypair }}'
    security_groups: tower
    network: tower
  register: test_runner

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Add new hosts to the in-memory inventory'
  add_host:
    hostname: '{{ test_runner.openstack.public_v4 }}'
    ansible_user: cloud-user

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Wait for server to accept SSH connections'
  wait_for:
    port: 22
    host: '{{ test_runner.openstack.public_v4 }}'
    search_regex: OpenSSH
    delay: 10

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Register to Red Hat subscription-manager'
  become: True
  redhat_subscription:
    username: '{{ rhsm_username }}'
    password: '{{ rhsm_password }}'
    pool_ids: '{{ rhsm_pool_ids }}'
  delegate_to: '{{ test_runner.openstack.public_v4 }}'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Create proper rhel-server-prerelease.repo'
  become: True
  yum_repository:
    name: rhel-server-prerelease
    description: RHEL Pre-release Packages
    baseurl: http://download-node-02.eng.bos.redhat.com/rel-eng/{{ rhel_version }}/compose/Server/x86_64/os
    sslverify: no
    gpgcheck: no
  delegate_to: '{{ test_runner.openstack.public_v4 }}'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Ensure /etc/yum.repos.d/redhat.repo is removed'
  become: True
  file:
    path: /etc/yum.repos.d/redhat.repo
    state: absent
  delegate_to: '{{ test_runner.openstack.public_v4 }}'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Define checkout branch (when tower is devel)'
  set_fact:
    checkout_branch: master
    aw_repo_url: 'http://nightlies.testing.ansible.com/ansible-tower_nightlies_m8u16fz56qr6q7/devel'
    archive_version_name: 'latest'
  when: tower_version == 'devel'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Define checkout branch (when tower not devel)'
  set_fact:
    checkout_branch: 'release_{{ tower_version[:3] }}'
    aw_repo_url: 'https://releases.ansible.com/ansible-tower'
    archive_version_name: '{{ tower_version }}'
  when: tower_version != 'devel'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Retrieve testing projects'
  git:
    repo: ssh://git@github.com/ansible/{{ item }}
    dest: '{{ working_dir }}/{{ item }}'
    version: '{{ checkout_branch }}'
  loop:
    - tower-qa
    - towerkit

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Generate ad-hoc inventory'
  blockinfile:
    path: '{{ working_dir }}/inventory-{{ tower_version }}'
    create: yes
    block: |
      [tower]
      {{ test_runner.openstack.public_v4 }} ansible_user=cloud-user

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Run the install playbook'
  command: |
    ansible-playbook -i {{ working_dir }}/inventory-{{ tower_version }} playbooks/install-tower.yml
    -e out_of_box_os=True
    -e minimum_var_space=0
    -e gpgcheck=0
    -e pendo_state=off
    -e aw_repo_url='{{ aw_repo_url }}'
    -e awx_setup_path=/setup/ansible-tower-setup-{{ archive_version_name }}.tar.gz
    -e admin_password='{{ admin_password }}'
    -e pg_password='{{ pg_password }}'
  args:
    chdir: '{{ working_dir }}/tower-qa'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Register UI response'
  uri:
    url: 'https://{{ test_runner.openstack.public_v4 }}/'
    validate_certs: no
    return_content: yes
    follow_redirects: all
  register: ui_response

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Register API response'
  uri:
    url: 'https://{{ test_runner.openstack.public_v4 }}/api/v2'
    validate_certs: no
  register: api_response

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | towerkit- Install requirements.txt'
  pip:
    virtualenv: '{{ working_dir }}/towerkit/.tkit{{ tower_version }}'
    requirements: '{{ working_dir }}/towerkit/requirements.txt'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | towerkit- Install local checked out towerkit'
  command: "{{ working_dir }}/towerkit/.tkit{{ tower_version }}/bin/pip install -e ."
  args:
    chdir: '{{ working_dir }}/towerkit'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | towerkit- Generate script to run'
  blockinfile:
    path: '{{ working_dir }}/tkit-jobtemplates'
    create: yes
    block: |
      jt = v2.job_templates.create()
      jt.ds.inventory.add_host()
      job = jt.launch().wait_until_completed()
      assert job.is_successful == True

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | towerkit- Run the script'
  command: '{{ working_dir }}/towerkit/.tkit{{ tower_version }}/bin/tkit -t "https://{{ test_runner.openstack.public_v4 }}" -l'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | towerkit- Run the script'
  command: '{{ working_dir }}/towerkit/.tkit{{ tower_version }}/bin/tkit -t "https://{{ test_runner.openstack.public_v4 }}" -f {{ working_dir }}/tkit-jobtemplates -x'

- name: 'RHEL: {{ rhel_version }} - Tower: {{ tower_version }} | Assert responses are correct'
  assert:
    that:
      - "'working...' in ui_response.content"
      - "'users' in api_response.json.keys()"
