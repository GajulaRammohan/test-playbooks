---
#
# To launch instance(s):
#
# ansible-playbook -i playbooks/inventory playbooks/deploy-tower-ami.yml
#
# To terminate instance(s):
#
# ansible-playbook -i playbooks/inventory -e 'instance_count=0' playbooks/deploy-tower-ami.yml
#
- hosts: local
  vars:
    instance_count: 1
    ec2_region: 'us-east-1'
    instance_type: 'm3.large'
    public_key_material: "{{ lookup('env','PUBLIC_KEY_MATERIAL') if lookup('env','PUBLIC_KEY_MATERIAL') else lookup('file', '~/.ssh/id_rsa.pub') }}"
    ec2_key_pair_name: "{{ 'jenkins' if lookup('env','JENKINS_HOME') else lookup('env','USER') }}"
    ec2_name_prefix: "{{ 'jenkins' if lookup('env','JENKINS_HOME') else lookup('env','USER') }}"

  tasks:
    - name: Lookup latest AMI if not explicitly passed in
      ec2_ami_find:
        ami_tags:
          Name: 'Ansible Tower *'
        sort: creationDate
        sort_order: descending
        sort_end: 1
        region: '{{ ec2_region }}'
        no_result_action: fail
      register: tower_ami
      when: tower_ami_id is not defined

    - name: Set tower_ami_id
      set_fact:
        tower_ami_id: '{{ tower_ami.results[0].ami_id }}'
      when: tower_ami_id is not defined

    - name: Create security groups for Tower
      ec2_group:
        name: Tower
        description: Security group for Tower instances
        region: '{{ ec2_region }}'
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0

    - name: ensure keypair exists
      ec2_key:
        region: '{{ ec2_region }}'
        name: '{{ ec2_key_pair_name }}'
        key_material: "{{ public_key_material }}"
      register: key_pair
      failed_when: "{{ key_pair.msg is defined or (key_pair.exception is defined and key_pair.exception.find('InvalidKeyPair.Duplicate') != -1) }}"
      # This `failed_when` condion is here because our CI sometimes has issues
      # when 2 different builds check for / attempt to create the key pair
      # at the same exact time.

    - name: Launch or terminate instance(s)
      ec2:
        instance_tags:
          Name: '{{ ec2_name_prefix }}-{{ tower_ami_id }}'
        count_tag:
          Name: '{{ ec2_name_prefix }}-{{ tower_ami_id }}'
        exact_count: '{{ instance_count }}'
        image: '{{ tower_ami_id }}'
        key_name: '{{ ec2_key_pair_name }}'
        region: '{{ ec2_region }}'
        instance_type: '{{ instance_type }}'
        group: Tower
        wait: yes
      register: tower_instance

    - name: Add launched instance(s) to `tower` group.
      add_host:
        name: '{{ item.dns_name }}'
        group: tower
        ansible_ssh_user: 'centos'
        ansible_ssh_host: '{{ item.dns_name }}'
      with_items: '{{ tower_instance.tagged_instances }}'

    - name: Wait for SSH
      wait_for:
        port: 22
        host: '{{ item.dns_name }}'
        state: 'started'
      with_items: '{{ tower_instance.tagged_instances }}'

    # HACK: While sshd may be listening, it may not fully accept connections
    # immediately
    - pause:
        seconds: 30
      when: instance_count | int != 0

- hosts: local
  roles:
    - save_inventory

#
# In order to run the UI tests, we need to:
#
# - Change the admin password which is randomized on boot.
#   This is easier than pulling it out of /etc/motd.
#
# - Tell the API not to use the client's IP address or hostname as part of the
#   token it grants the front end. This is because Sauce Labs' IP address
#   changes throughout the test run on Windows.
#
- hosts: tower
  become: yes

  tasks:
    - name: Wait for db to be reconfigured
      wait_for:
        path: '/etc/tower/reset/.reconfigured'
        state: 'present'

    - name: Wait for PG to come back up
      wait_for:
        port: 5432

    - name: Change admin password
      shell: tower-manage update_password --username=admin --password=fo0m4nchU
      register: update_password
      changed_when: update_password.stdout != 'Password not updated'

    - name: Tell Tower not to use IP address or host in API tokens
      lineinfile:
        dest: /etc/tower/conf.d/remote_host_headers.py
        line: 'REMOTE_HOST_HEADERS = []'
        backrefs: yes
        regexp: '^REMOTE_'
      register: remote_host_headers

    - name: Restart Tower
      shell: ansible-tower-service restart
      when: remote_host_headers.changed
