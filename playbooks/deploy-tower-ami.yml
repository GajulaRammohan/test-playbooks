---
#
# To launch instance(s):
#
# ansible-playbook -i playbooks/inventory playbooks/deploy-tower-ami.yml
#
# To terminate instance(s):
#
# ansible-playbook -i playbooks/inventory -e 'instance_count=0' playbooks/deploy-tower-ami.yml
#
- hosts: local
  vars:
    instance_count: 1
    ec2_region: 'us-east-1'
    instance_type: 'm3.medium'
    public_key_material: "{{ lookup('env','PUBLIC_KEY_MATERIAL') if lookup('env','PUBLIC_KEY_MATERIAL') else lookup('file', '~/.ssh/id_rsa.pub') }}"
    ec2_key_pair_name: "{{ 'jenkins' if lookup('env','JENKINS_HOME') else lookup('env','USER') }}"
    ec2_name_prefix: "{{ 'jenkins' if lookup('env','JENKINS_HOME') else lookup('env','USER') }}"

  tasks:
    - name: Lookup latest AMI if not explicitly passed in
      ec2_ami_find:
        ami_tags:
          Name: 'Ansible Tower *'
        sort: creationDate
        sort_order: descending
        sort_end: 1
        region: '{{ ec2_region }}'
        no_result_action: fail
      register: tower_ami
      when: tower_ami_id is not defined

    - name: Set tower_ami_id
      set_fact:
        tower_ami_id: '{{ tower_ami.results[0].ami_id }}'
      when: tower_ami_id is not defined

    - name: Create security groups for Tower
      ec2_group:
        name: Tower
        description: Security group for Tower instances
        region: '{{ ec2_region }}'
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0

    - name: ensure keypair exists
      ec2_key:
        region: '{{ ec2_region }}'
        name: '{{ ec2_key_pair_name }}'
        key_material: "{{ public_key_material }}"
      register: key_pair
      failed_when: "{{ (key_pair.module_stderr is defined and key_pair.module_stderr.find('InvalidKeyPair.Duplicate') == -1) or key_pair.msg is defined }}"
      ignore_errors: true
      # This `failed_when` condition is here because our CI sometimes has issues
      # when 2 different builds check for / attempt to create the key pair
      # at the same exact time.

    - name: Launch or terminate instance(s)
      ec2:
        instance_tags:
          Name: '{{ ec2_name_prefix }}-{{ tower_ami_id }}'
        count_tag:
          Name: '{{ ec2_name_prefix }}-{{ tower_ami_id }}'
        exact_count: '{{ instance_count }}'
        image: '{{ tower_ami_id }}'
        key_name: '{{ ec2_key_pair_name }}'
        region: '{{ ec2_region }}'
        instance_type: '{{ instance_type }}'
        group: Tower
        wait: yes
      register: tower_instance

    - name: Add launched instance(s) to `tower` group.
      add_host:
        name: '{{ item.dns_name }}'
        group: tower
        ansible_user: 'centos'
        ansible_host: '{{ item.dns_name }}'
      with_items: '{{ tower_instance.tagged_instances }}'

    - name: Wait for SSH
      wait_for:
        port: 22
        host: '{{ item.dns_name }}'
        state: 'started'
      with_items: '{{ tower_instance.tagged_instances }}'

    # HACK: While sshd may be listening, it may not fully accept connections
    # immediately
    - pause:
        seconds: '{{ ec2_pause_time|default(45) }}'
      when: instance_count | int != 0

- hosts: local
  roles:
    - save_inventory


- hosts: tower
  become: yes
  roles:
    - auth_keys

#
# In order to run the UI tests, we need to:
#
# - Change the admin password which is randomized on boot.
#   This is easier than pulling it out of /etc/motd.
#
# - Turn off Pendo tracking.
#
# - Tell the API not to use the client's IP address or hostname as part of the
#   token it grants the front end. This is because Sauce Labs' IP address
#   changes throughout the test run on Windows.
#
- hosts: tower
  become: yes
  vars:
    admin_password: ch@ng3m3

  tasks:
    - name: Wait for db to be reconfigured
      wait_for:
        path: '/etc/tower/reset/.reconfigured'
        state: 'present'

    - name: Wait for PG to come back up
      wait_for:
        port: 5432

    - name: Change admin password
      shell: awx-manage update_password --username=admin --password={{ admin_password }}
      register: update_password
      changed_when: update_password.stdout != 'Password not updated'

    - name: verify Tower API is accepting connections
      uri:
          url: 'https://localhost/api/v2/ping/'
          validate_certs: no
          user: 'admin'
          password: '{{ admin_password }}'
          force_basic_auth: yes
      register: result
      until: result['status']|default(0) == 200
      retries: 20
      delay: 2

    - name: obtain tower version
      command: awx-manage --version
      register: tower_version

    - name: turn off pendo tracking
      uri:
          url: 'https://localhost/api/v1/settings/all/'
          method: PATCH
          body:
            PENDO_TRACKING_STATE: off
          body_format: json
          validate_certs: no
          status_code: '200'
          user: 'admin'
          password: '{{ admin_password }}'
          force_basic_auth: yes
      when: tower_version.stdout|version_compare('3.1.0', '>=')

    - name: turn off pendo tracking (legacy)
      lineinfile:
        dest: /etc/tower/settings.py
        line: "PENDO_TRACKING_STATE = 'off'"
        regexp: ^PENDO_TRACKING_STATE*
        state: present
        create: yes
      when: not(tower_version.stdout|version_compare('3.1.0', '>='))
      notify: Restart Tower

    - name: Tell Tower not to use IP address or host in API tokens
      lineinfile:
        dest: /etc/tower/conf.d/remote_host_headers.py
        line: 'REMOTE_HOST_HEADERS = []'
        create: yes
      notify: Restart Tower

  handlers:
    - name: Restart Tower
      shell: ansible-tower-service restart
      notify: wait until tower is ready

    - name: wait until tower is ready
      uri:
          url: 'https://localhost/api/v1/ping/'
          validate_certs: no
          user: 'admin'
          password: '{{ admin_password }}'
          force_basic_auth: yes
      register: result
      until: result['status']|default(0) == 200
      retries: 20
      delay: 2 
