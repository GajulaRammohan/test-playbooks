---
# This playbook deploys the AWX application (database, web and worker) to a
# multiple platforms across multiple cloud providers.

#
# Create remote hosts
#
- hosts: local
  vars:
    exact_count: 1
    ec2_region: us-east-1
    ec2_security_group: AWX
    ec2_key_name: jenkins
    ec2_public_key: '~/.ssh/id_rsa.jenkins.pub'
    instance_name: ansible-tower
    instances:
        - {'name': 'centos-6.5-x86_64',   'user': 'root',        'id': 'ami-eb6b0182', 'type': 'm3.medium' }
        - {'name': 'rhel-6.5-x86_64',     'user': 'ec2-user',    'id': 'ami-63b6910a', 'type': 'm3.medium' }
        - {'name': 'rhel-7.0-x86_64',     'user': 'ec2-user',    'id': 'ami-08aa4c60', 'type': 'm3.medium' }
        - {'name': 'ubuntu-12.04-x86_64', 'user': 'ubuntu',      'id': 'ami-5db4a934', 'type': 'm3.medium' }
        - {'name': 'ubuntu-14.04-x86_64', 'user': 'ubuntu',      'id': 'ami-018c9568', 'type': 'm3.medium' }
        - {'name': 'fedora-20-x86_64',    'user': 'fedora',      'id': 'ami-1337187a', 'type': 'm3.medium' }

  tasks:
    - name: ensure security group exists
      ec2_group:
        state: present
        name: '{{ ec2_security_group }}'
        description: Security Group for AWX instances
        region: '{{ ec2_region }}'
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
      when: instances

    - name: ensure keypair exists
      ec2_key:
        region: '{{ ec2_region }}'
        name: '{{ ec2_key_name }}'
        key_material: "{{ item }}"
      with_file: ec2_public_key
      register: keypair
      when: instances

    - name: launch amis
      ec2:
        region: '{{ ec2_region }}'
        instance_type: '{{ item.type }}'
        instance_tags:
            Name: '{{ instance_name }}-{{ item.name }}'
        count_tag:
            Name: '{{ instance_name }}-{{ item.name }}'
            Name: '{{ instance_name }}-{{ item.name }}'
        exact_count: '{{ exact_count }}'
        group: '{{ ec2_security_group }}'
        key_name: '{{ ec2_key_name }}'
        image: '{{ item.id }}'
        wait: yes
      with_items: instances
      register: ec2

    - debug: var=ec2

    - name: wait for instances to listen on port:22
      wait_for:
        state=started
        host={{ item.tagged_instances[0].public_dns_name }}
        port=22
      with_items: ec2.results
      when: instances and ec2 is defined and ec2.results and exact_count > 0

    - name: add_host
      # add_host: name={{ ec2_name_prefix }}-{{ item.item.name }}
      add_host: name={{ item.tagged_instances[0].public_dns_name }}
         groups=ec2,{{ item.item.name }}
         ansible_ssh_user={{ item.item.user }}
         ansible_ssh_host={{ item.tagged_instances[0].public_dns_name }}
         # ansible_ssh_private_key_file={{ ec2_keypair_private }}
      with_items: ec2.results
      when: instances and ec2 is defined and ec2.results and exact_count > 0

    - name: generate static inventory file
      template: src=files/inventory.j2 dest=./inventory.log mode=0644
      when: ec2 is defined and ec2.results and exact_count > 0

- name: 'install ansible'
  hosts: ec2
  sudo: yes
  roles:
    - { role: packages }

- name: 'reset tower admin password (optional)'
  hosts: ec2
  sudo: yes
  vars:
    admin_password: fo0m4nchU
  tasks:
    - name: determine if awx is installed
      shell: awx-manage --help
      ignore_errors: true
      register: is_awx_installed

    - name: reset admin_password
      shell: echo "from django.contrib.auth.models import User; usr = User.objects.get(username='admin'); usr.set_password('{{ admin_password }}'); usr.save();" | awx-manage shell
      sudo_user: awx
      when: is_awx_installed|success

    - name: restart awx-celeryd
      supervisorctl: name=awx-celeryd state=restarted
      when: is_awx_installed|success

    - name: restart awx-callback-receiver
      supervisorctl: name=awx-callback-receiver state=restarted
      when: is_awx_installed|success

    - name: restart apache2
      service: name=apache2 state=restarted
      when: is_awx_installed|success

