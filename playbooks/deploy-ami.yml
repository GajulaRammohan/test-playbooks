---
# This playbook deploys the AWX application (database, web and worker) to a
# multiple platforms across multiple cloud providers.

#
# Create remote hosts
#
- hosts: local
  vars:
    exact_count: 1
    ec2_region: us-east-1
    ec2_security_group: AWX
    ec2_key_name: jenkins
    ec2_image: ami-d0f89fb9
    instance_name: jlaska-perftest
    instance_types:
        - m1.small

  tasks:
    - name: launch amis
      ec2:
        region: '{{ ec2_region }}'
        instance_type: '{{ item }}'
        instance_tags:
            Name: '{{ instance_name }}'
        count_tag:
            Name: '{{ instance_name }}'
        exact_count: '{{ exact_count }}'
        group: '{{ ec2_security_group }}'
        key_name: '{{ ec2_key_name }}'
        image: '{{ ec2_image }}'
        wait: yes
      with_items: instance_types
      register: ec2

    - debug: var=ec2
    - name: wait for instances to listen on port:22
      wait_for:
        state=started
        host={{ item.public_dns_name }}
        port=22
      with_items: ec2.results[0].tagged_instances
      when: ec2 is defined and exact_count > 0

    - name: add_host
      add_host: name={{ item.public_dns_name }}
         groups=ec2,{{ instance_name }},{{ item.instance_type }}
         ansible_ssh_user=ubuntu
         ansible_ssh_host={{ item.public_dns_name }}
      with_items: ec2.results[0].tagged_instances
      when: ec2 is defined and exact_count > 0

    - name: generate static inventory file
      template: src=files/inventory.j2 dest=./inventory.log mode=0644
      when: ec2 is defined and exact_count > 0

- hosts: ec2
  vars:
    admin_password: fo0m4nchU

  sudo: true
  tasks:
    - name: determine if awx is installed
      shell: awx-manage --help
      ignore_errors: true
      register: is_awx_installed

    - name: reset admin_password
      shell: echo "from django.contrib.auth.models import User; usr = User.objects.get(username='admin'); usr.set_password('{{ admin_password }}'); usr.save();" | awx-manage shell
      sudo_user: awx
      when: is_awx_installed|success

    - name: restart awx-celeryd
      supervisorctl: name=awx-celeryd state=restarted
      when: is_awx_installed|success

    - name: restart awx-callback-receiver
      supervisorctl: name=awx-callback-receiver state=restarted
      when: is_awx_installed|success

    - name: restart apache2
      service: name=apache2 state=restarted
      when: is_awx_installed|success

