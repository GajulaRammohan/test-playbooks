import json

import factory
import fauxfactory
import pytest

from towerkit.api import pages
from towerkit.utils import SimpleNamespace


class PageFactoryOptions(factory.base.FactoryOptions):
    """Configuration for PageFactory"""

    def _build_default_options(self):
        options = super(PageFactoryOptions, self)._build_default_options()
        options.append(factory.base.OptionDefault('get_or_create', (), inherit=True))
        options.append(factory.base.OptionDefault('resources', (), inherit=True))
        return options


class PageFactory(factory.Factory):
    """Tower API Page Model Base Factory"""

    _options_class = PageFactoryOptions

    @classmethod
    def _adjust_kwargs(cls, **kwargs):
        if 'request' not in kwargs:
            kwargs['request'] = False
        return kwargs

    @classmethod
    def _create(cls, model_class, request, **kwargs):
        """Create data and post to the associated endpoint"""
        testsetup = request.getfuncargvalue('testsetup') if request else None
        model = model_class(testsetup.api)  # TODO: determine desired authentication behavior out of pytest context.
        # get or create the requested resource
        if cls._meta.get_or_create:
            obj = cls._get_or_create(model, request, **kwargs)
        else:
            obj = model.create(**kwargs)
            if request:
                request.addfinalizer(obj.silent_cleanup)
        return obj

    @classmethod
    def _get_or_create(cls, model, request, **kwargs):
        """Create an instance of the model through its associated endpoint
        if it doesn't already exist
        """
        key_fields = {}
        for field in cls._meta.get_or_create:
            if field not in kwargs:
                msg = "{0} initialization value '{1}' not found"
                msg = msg.format(cls.__name__, field)
                raise factory.errors.FactoryError(msg)
            key_fields[field] = kwargs[field]
        try:
            obj = model.get(**key_fields).results.pop()
        except IndexError:
            obj = model.create(**kwargs)
            if request:
                request.addfinalizer(obj.silent_cleanup)
        return obj

    @classmethod
    def payload(cls, request, **kwargs):
        """Generate POST-able data for the model's list endpoint. This is
        similar to calling the factory's _create method except the final
        POST request is not made. Instead, a tuple containing the http request
        payload (dict) and any page objects generated by the factory (dict)
        is returned.

        If a resource is listed by name as a 'resource' attribute in the
        factory class definition, the page object will be replaced by
        its id when populating the payload dict.
        """
        # Generate attribute values and call subfactories in their proper order.
        # Reproduces initial setup context for the _create method:
        # https://github.com/FactoryBoy/factory_boy/blob/master/factory/base.py
        kwargs['request'] = request
        attrs = cls.attributes(create=True, extra=kwargs)
        attrs = cls._rename_fields(**attrs)

        # Create dict of resources (page objects) generated by this factory
        resources = {}
        for key in cls._meta.resources:
            if key in attrs:
                resources[key] = attrs.get(key)

        # Create payload data dict
        post_request_data = attrs.copy()
        # Replace any page object listed as a 'resource' attribute in the
        # factory class definition with the page object's id
        resource_keys = [key for key in post_request_data if key in cls._meta.resources]
        for key in resource_keys:
            if post_request_data.get(key) is not None:
                post_request_data[key] = post_request_data[key].id
        # Remove any attribute listed as an 'inline_arg' attribute in
        # the factory class definition
        for key in cls._meta.inline_args:
            del post_request_data[key]
        # Remove any attribute listed as an 'exclude' attribute in the
        # factory class definition
        for arg in cls._meta.exclude:
            post_request_data.pop(arg, None)
        # Remove any attribute defined under 'params' in the factory
        # class definition
        for arg in cls._meta.parameters:
            post_request_data.pop(arg, None)

        return post_request_data, resources


class OrganizationFactory(PageFactory):
    class Meta:
        model = pages.Organization
        inline_args = ('request',)


class UserFactory(PageFactory):
    class Meta:
        model = pages.User
        inline_args = ('request',)


class WorkflowJobTemplateFactory(PageFactory):
    class Meta:
        model = pages.WorkflowJobTemplate
        inline_args = ('request',)


class CredentialFactory(PageFactory):
    class Meta:
        model = pages.Credential
        inline_args = ('request',)
        resources = ('organization', 'user', 'team')

    user = None
    team = None

    @factory.LazyAttribute
    def organization(self):
        if not any((self.user, self.team)):
            return factory.SubFactory(OrganizationFactory, request=factory.SelfAttribute('..request'))
        return None


class InventoryFactory(PageFactory):
    class Meta:
        model = pages.Inventory
        inline_args = ('request',)
        resources = ('organization',)

    localhost = factory.RelatedFactory('tests.lib.fixtures.factory_fixtures.HostFactory',
                                       factory_related_name='inventory',
                                       request=factory.SelfAttribute('..request'),
                                       name='localhost')
    organization = factory.SubFactory(OrganizationFactory, request=factory.SelfAttribute('..request'))


class InventoryScriptFactory(PageFactory):
    class Meta:
        model = pages.InventoryScript
        inline_args = ('request',)
        resources = ('organization',)

    name = factory.LazyFunction(fauxfactory.gen_alphanumeric)
    organization = factory.SubFactory(OrganizationFactory, request=factory.SelfAttribute('..request'))


class LabelFactory(PageFactory):
    class Meta:
        model = pages.Label
        inline_args = ('request',)
        resources = ('organization',)

    name = factory.LazyFunction(fauxfactory.gen_alphanumeric)
    organization = factory.SubFactory(OrganizationFactory, request=factory.SelfAttribute('..request'))


class NotificationTemplateFactory(PageFactory):
    class Meta:
        model = pages.NotificationTemplate
        inline_args = ('request',)
        resources = ('organization',)

    organization = factory.SubFactory(OrganizationFactory, request=factory.SelfAttribute('..request'))


class ProjectFactory(PageFactory):
    class Meta:
        model = pages.Project
        inline_args = ('request',)
        resources = ('organization',)

    organization = factory.SubFactory(OrganizationFactory, request=factory.SelfAttribute('..request'))


class TeamFactory(PageFactory):
    class Meta:
        model = pages.Team
        inline_args = ('request',)
        resources = ('organization',)

    organization = factory.SubFactory(OrganizationFactory, request=factory.SelfAttribute('..request'))


class AdHocCommandFactory(PageFactory):
    class Meta:
        model = pages.AdHocCommand
        inline_args = ('request',)
        resources = ('credential', 'inventory')

    inventory = factory.SubFactory(InventoryFactory, request=factory.SelfAttribute('..request'))
    credential = factory.SubFactory(CredentialFactory, request=factory.SelfAttribute('..request'))


class GroupFactory(PageFactory):
    class Meta:
        model = pages.Group
        inline_args = ('request',)
        resources = ('inventory',)

    name = factory.LazyFunction(fauxfactory.gen_alphanumeric)
    inventory = factory.SubFactory(InventoryFactory, request=factory.SelfAttribute('..request'))


class HostFactory(PageFactory):
    class Meta:
        model = pages.Host
        inline_args = ('request',)
        resources = ('inventory',)

    name = factory.LazyFunction(fauxfactory.gen_alphanumeric)
    inventory = factory.SubFactory(InventoryFactory, request=factory.SelfAttribute('..request'))
    variables = json.dumps({'ansible_ssh_host': '127.0.0.1',
                            'ansible_connection': 'local'})


class JobTemplateFactory(PageFactory):
    class Meta:
        model = pages.JobTemplate
        inline_args = ('request',)
        exclude = ('organization',)
        resources = ('project', 'inventory', 'credential', 'organization')

    job_type = 'run'
    playbook = 'ping.yml'
    name = factory.LazyFunction(fauxfactory.gen_alphanumeric)
    description = factory.LazyFunction(fauxfactory.gen_alphanumeric)

    organization = factory.SubFactory(OrganizationFactory, request=factory.SelfAttribute('..request'))
    project = factory.SubFactory(ProjectFactory,
                                 request=factory.SelfAttribute('..request'),
                                 organization=factory.SelfAttribute('..organization'),
                                 wait=True)
    credential = factory.SubFactory(CredentialFactory,
                                    request=factory.SelfAttribute('..request'),
                                    organization=factory.SelfAttribute('..organization'))
    inventory = factory.SubFactory(InventoryFactory,
                                   request=factory.SelfAttribute('..request'),
                                   organization=factory.SelfAttribute('..organization'))


class WorkflowJobTemplateNodeFactory(PageFactory):
    class Meta:
        model = pages.WorkflowJobTemplateNode
        inline_args = ('request',)
        resources = ('workflow_job_template', 'unified_job_template')

    workflow_job_template = factory.SubFactory(WorkflowJobTemplateFactory, request=factory.SelfAttribute('..request'))
    unified_job_template = factory.SubFactory(JobTemplateFactory, request=factory.SelfAttribute('..request'))


class FactoryFixture(object):
    """This class is used within the factory fixture definitions below to wrap
    up the request fixture with a factory class so we don't need to explicitly
    bring the request fixture into every test that needs to use a factory.
    """

    def __init__(self, request, page_factory):
        self.request = request
        self._factory = page_factory

    def __call__(self, **kwargs):
        return self._factory(request=self.request, **kwargs)

    def payload(self, **kwargs):
        return self._factory.payload(request=self.request, **kwargs)


def factory_namespace(request):
    return SimpleNamespace(ad_hoc_command=FactoryFixture(request, AdHocCommandFactory),
                           credential=FactoryFixture(request, CredentialFactory),
                           group=FactoryFixture(request, GroupFactory),
                           host=FactoryFixture(request, HostFactory),
                           inventory=FactoryFixture(request, InventoryFactory),
                           inventory_script=FactoryFixture(request, InventoryScriptFactory),
                           job_template=FactoryFixture(request, JobTemplateFactory),
                           notification_template=FactoryFixture(request, NotificationTemplateFactory),
                           organization=FactoryFixture(request, OrganizationFactory),
                           project=FactoryFixture(request, ProjectFactory),
                           user=FactoryFixture(request, UserFactory),
                           team=FactoryFixture(request, TeamFactory),
                           label=FactoryFixture(request, LabelFactory),
                           workflow_job_template_node=FactoryFixture(request, WorkflowJobTemplateNodeFactory),
                           workflow_job_template=FactoryFixture(request, WorkflowJobTemplateFactory))


@pytest.fixture
def factories(request):
    """Inject a function-scoped factory namespace into your test context"""
    return factory_namespace(request)


@pytest.fixture(scope='module')
def module_factories(module_install_enterprise_license, request):
    """Inject a module-scoped factory namespace into your test context"""
    return factory_namespace(request)
