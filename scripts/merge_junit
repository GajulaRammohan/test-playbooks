#!/usr/bin/env python
"""
Takes one or more jUnit XML report files and merge them into a single jUnit XML
report file.

If the same test is present on multiple jUnit XML report files, then its result
will be the first result found. The result will be updated only if the first
result is failed, errored or skipped and a success result is found later.
"""
import argparse
import enum
import textwrap

from junitparser import Error, Failure, JUnitXml, Skipped, TestSuite


_CACHE = {}


class ResultType(enum.IntEnum):
    passed = 1
    skipped = 2
    failed = 3
    errored = 4


def _result_type(result):
    if result is None:
        return ResultType.passed
    if isinstance(result, Skipped):
        return ResultType.skipped
    if isinstance(result, Error):
        return ResultType.errored
    if isinstance(result, Failure):
        return ResultType.failed


def _format_result(result, indent=4 * ' '):
    result_type = _result_type(result)
    output = f'{result_type.name}'
    if result is not None and result.message:
        message = result.message.replace('\\n', '\n')
        output += f': {message}'
    return textwrap.indent(output, indent)


def _merge_junit(junit, output):
    for case in junit:
        if case.name not in _CACHE:
            output.add_testcase(case)
            _CACHE[case.name] = case

        previous_result = _format_result(
            _CACHE[case.name].result)
        previous_type = _result_type(_CACHE[case.name].result)
        current_result = _format_result(case.result)
        current_type = _result_type(case.result)

        if previous_type > current_type:
            print(
                f'{case.name} with the following previous result:\n\n'
                f'{previous_result}\n'
                f'is being updated to:\n\n'
                f'{current_result}\n'
            )
            output.remove_testcase(_CACHE[case.name])
            output.add_testcase(case)
            _CACHE[case.name] = case
        elif previous_type != current_type:
            print(
                f'{case.name} is already stored with result:\n\n'
                f'{previous_result}\n\n'
                f'And will not be update with the following result:\n\n'
                f'{current_result}\n'
            )


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        'junit_paths',
        help='Original jUnit XML path(s).',
        metavar='JUNIT_PATH',
        nargs='+',
    )
    parser.add_argument(
        'output_path',
        help='Merged jUnit XML Path.',
        metavar='OUTPUT_PATH',
    )
    args = parser.parse_args()

    output_suite = TestSuite('pytest')
    for junit_path in args.junit_paths:
        junit = JUnitXml.fromfile(junit_path)
        _merge_junit(junit, output_suite)
    output_suite.update_statistics()

    output = JUnitXml()
    output.add_testsuite(output_suite)
    output.write(args.output_path)
