import factory


class PageFactoryOptions(factory.base.FactoryOptions):
    """Configuration for PageFactory
    """
    def _build_default_options(self):
        options = super(PageFactoryOptions, self)._build_default_options()
        options.append(factory.base.OptionDefault('get_or_create', (), inherit=True))
        options.append(factory.base.OptionDefault('resources', (), inherit=True))
        return options


class PageFactory(factory.Factory):
    """Tower API Page Model Base Factory
    """
    _options_class = PageFactoryOptions

    @classmethod
    def _adjust_kwargs(cls, **kwargs):
        if 'request' not in kwargs:
            kwargs['request'] = False
        return kwargs

    @classmethod
    def _create(cls, model_class, request, **kwargs):
        """Create data and post to the associated endpoint
        """
        testsetup = request.getfuncargvalue('testsetup') if request else None
        model = model_class(testsetup)  # TODO: determine desired authentication behavior out of pytest context.
        # get or create the requested resource
        if cls._meta.get_or_create:
            obj = cls._get_or_create(model, request, **kwargs)
        else:
            obj = model.create(**kwargs)
            if request:
                request.addfinalizer(obj.silent_cleanup)
        return obj

    @classmethod
    def _get_or_create(cls, model, request, **kwargs):
        """Create an instance of the model through its associated endpoint
        if it doesn't already exist
        """
        key_fields = {}
        for field in cls._meta.get_or_create:
            if field not in kwargs:
                msg = "{0} initialization value '{1}' not found"
                msg = msg.format(cls.__name__, field)
                raise factory.errors.FactoryError(msg)
            key_fields[field] = kwargs[field]
        try:
            obj = model.get(**key_fields).results.pop()
        except IndexError:
            obj = model.create(**kwargs)
            if request:
                request.addfinalizer(obj.silent_cleanup)
        return obj

    @classmethod
    def payload(cls, request, **kwargs):
        """Generate POST-able data for the model's list endpoint. This is
        similar to calling the factory's _create method except the final
        POST request is not made. Instead, a tuple containing the http request
        payload (dict) and any page objects generated by the factory (dict)
        is returned.

        If a resource is listed by name as a 'resource' attribute in the
        factory class definition, the page object will be replaced by
        its id when populating the payload dict.
        """

        # Generate attribute values and call subfactories in their proper order.
        # Reproduces initial setup context for the _create method:
        # https://github.com/FactoryBoy/factory_boy/blob/master/factory/base.py
        kwargs['request'] = request
        attrs = cls.attributes(create=True, extra=kwargs)
        attrs = cls._rename_fields(**attrs)

        # Create dict of resources (page objects) generated by this factory
        resources = {}
        for key in cls._meta.resources:
            if key in attrs:
                resources[key] = attrs.get(key)

        # Create payload data dict
        post_request_data = attrs.copy()
        # Replace any page object listed as a 'resource' attribute in the
        # factory class definition with the page object's id
        resource_keys = [key for key in post_request_data if key in cls._meta.resources]
        for key in resource_keys:
            if post_request_data.get(key) is not None:
                post_request_data[key] = post_request_data[key].id
        # Remove any attribute listed as an 'inline_arg' attribute in
        # the factory class definition
        for key in cls._meta.inline_args:
            del post_request_data[key]
        # Remove any attribute listed as an 'exclude' attribute in the
        # factory class definition
        for arg in cls._meta.exclude:
            post_request_data.pop(arg, None)
        # Remove any attribute defined under 'params' in the factory
        # class definition
        for arg in cls._meta.parameters:
            post_request_data.pop(arg, None)

        return post_request_data, resources
