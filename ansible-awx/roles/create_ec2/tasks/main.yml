---
# Tasks to delete (optionally) and create rax instances

# FIXME - update ec2_group to support state:present
- name: ensure awx security group exists
  ec2_group:
    state: present
    name: '{{ aws_security_group }}'
    description: Security Group for AWX instances
    region: '{{ aws_region }}'
    ec2_access_key: '{{ aws_access_key }}'
    ec2_secret_key: '{{ aws_secret_key }}'
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 10.0.0.0/8
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 10.0.0.0/8
      - proto: tcp
        from_port: 443
        to_port: 443
  ignore_errors: true

- name: delete existing ec2 instance(s)
  ec2:
    state: absent
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ aws_region }}'
    instance_type: '{{ aws_instance_type }}'
    instance_tags: '{"Name": "{{aws_name_prefix}}-{{item.name}}"}'
    group: '{{ aws_security_group }}'
    key_name: '{{ aws_key_name }}'
    # instance_ids: ['{{ item.instance_id }}']
    idempotency_attribute: 'tags'
    instance_tags: '{"Name": "{{aws_name_prefix}}-{{item.name}}"}'
    wait: yes
  with_items: '{{ aws_images }}'
  when: delete_on_start

- name: create/locate ec2 instance(s)
  ec2:
    state: present
    idempotency_attribute: 'tags'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ aws_region }}'
    instance_type: '{{ aws_instance_type }}'
    instance_tags: '{"Name": "{{aws_name_prefix}}-{{item.name}}"}'
    group: '{{ aws_security_group }}'
    key_name: '{{ aws_key_name }}'
    image: '{{ item.id }}'
    wait: yes
  with_items: '{{ aws_images }}'
  register: aws

- name: ensure instances are listening on port:22
  shell: nc -d -z -w 30 {{ item.instances[0].public_dns_name }} 22 >>/dev/null
  with_items: '{{ aws.results }}'

- name: add_host
  add_host: name={{ aws_name_prefix }}-{{ item.item.name }}
     groups=all_instances,aws_instances
     ansible_ssh_user={{ item.item.user }}
     ansible_ssh_host={{ item.instances[0].public_dns_name }}
     # ansible_ssh_private_key_file={{ aws_keypair_private }}
  with_items: '{{ aws.results }}'
