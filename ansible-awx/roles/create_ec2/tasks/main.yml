---
# Tasks to delete (optionally) and create rax instances

- name: ensure awx security group exists
  ec2_group:
    state: present
    name: '{{ aws_security_group }}'
    description: Security Group for AWX instances
    region: '{{ aws_region }}'
    ec2_access_key: '{{ aws_access_key }}'
    ec2_secret_key: '{{ aws_secret_key }}'
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0

- name: delete existing ec2 instance(s)
  ec2:
    state: absent
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ aws_region }}'
    instance_type: '{{ aws_instance_type }}'
    #instance_tags: '{"Name": "{{aws_name_prefix}}-{{item.name}}"}'
    instance_tags:
        Name: '{{aws_name_prefix}}-{{item.name}}'
    group: '{{ aws_security_group }}'
    key_name: '{{ aws_key_name }}'
    idempotency_attribute: 'tags'
    wait: yes
  with_items: aws_images
  when: delete_on_start

- name: create/locate ec2 instance(s)
  ec2:
    state: present
    idempotency_attribute: 'tags'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    region: '{{ aws_region }}'
    instance_type: '{{ aws_instance_type }}'
    #instance_tags: '{"Name": "{{aws_name_prefix}}-{{item.name}}"}'
    instance_tags:
        Name: '{{aws_name_prefix}}-{{item.name}}'
    group: '{{ aws_security_group }}'
    key_name: '{{ aws_key_name }}'
    image: '{{ item.id }}'
    wait: yes
  with_items: aws_images
  register: aws

# Despite using `wait` on the ec2 module, instances aren't accepting ssh
# connections immediately.  The following will ensure systems are ready for use
# before proceeding.
- name: wait for instances to listen on port:22
  wait_for:
    state=started
    host={{ item.instances[0].public_dns_name }}
    port=22
  with_items: aws.results

- name: add_host
  add_host: name={{ aws_name_prefix }}-{{ item.item.name }}
     groups=all_instances,aws_instances
     ansible_ssh_user={{ item.item.user }}
     ansible_ssh_host={{ item.instances[0].public_dns_name }}
     # ansible_ssh_private_key_file={{ aws_keypair_private }}
  with_items: aws.results
